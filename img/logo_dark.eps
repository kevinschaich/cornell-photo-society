%!PS-Adobe-3.0 EPSF-3.0
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12 (Build 16A313a) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 325 325
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 325 325
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: NHPCKT+GothamRounded-Bold
%!FontType1-1.0: NHPCKT+GothamRounded-Bold 001.001%%CreationDate: 9/3/16% Copyright 2016 Apple Inc. and its licensors, all rights reserved.11 dict begin/FontInfo 9 dict dup begin/version (001.001) readonly def/FullName (Gotham Rounded Bold) readonly def/FamilyName (Gotham Rounded Bold) readonly def/Weight (SnapShot) readonly def/isFixedPitch false def/UnderlinePosition -75 def/UnderlineThickness 50 defend readonly def/FontName /NHPCKT+GothamRounded-Bold def/PaintType 0 def/FontType 1 def/FontMatrix [0.0010 0 0 0.0010 0 0] readonly def/Encoding 256 array 0 1 255 {1 index exch /.notdef put} fordup 33 /C putreadonly def/FontBBox {-60 -297 1195 1087} readonly defcurrentdict endcurrentfile eexecD9D66F633B846A989B9974B0179FC6CC4458BB4CB99E3608702C78822367AAF89059868F63F93207640A6BD5DA214789139C491E02A37BF3866F2964E8D690D48D9F6C4A5EC22355F8123573812483E06B968AE84B5F20A982A0E6576475351697AB8C6EA040355C5542F297D7A3AF28AB93EA0771E0D56DBF00F7CA9CE9FB9FC2E0ECB00D04D5F5F3F24B987B546D6274971A477DEE12C44623C180BCDBA21172627610C4736632D1A4693E79719C3BC43DF5330790A52DCD4CF455ACC213F6B1C4BA249179DB360225568161552A16682E3A3604BFC39D571B1F8F18375BECF1D53D6B905178396C0A8769CD0E4AB8D58AD23C70C0722B8DE8953F82CF373C5288CDD57807E5BFE5E4B18A3A8241ADA78757D9C86C22A71CE72581F66DE7998ACCBA3071C6F0FFD791E9863024B339FB3959188B9EF3CB6EED0C9A41FB5215844A9A5A373FA3938D094F8A17E0A27C841BB82F5D07B307656B6F38FC7DC62388AB14957AF94A46A3415ED089D708CDFC550D89C744E331810844A90FF1DEB96AFD665E64AC0FECE4823C0E08D1256C177829BE7B556F9779919F268265516A5E13DD6756297A62F0E4588E10C09F4B228010CAA6779E2408C447F2CF5B2EEC37950DB7BA7A7FC965A61989B0B2FFD88597D3008A25FF4E9B6193FC40B1AAE55DEEDFCF2DB4CED3F9B63994C77A332623E825B719F386D2FB91E5FE8B8128FEBA8E8D285A1720694CB52B5925C031C0AB9392DF07454502E0F86F65E16D5BB214C48867B8221939E8E509A08CFA016F1506D32A23DEEDF0C1327F7A218859470D0B43762E1778C9A421B2B3ED38A96D5117A5D1EC5C1C245800AA184A0A53BB9186A21C37621A84A8092743471111EAE35843CFDF6103C83434D1053D568FB782825106608FF0747678FF58FF3381F35658D5DBE5AA6AB10E6D4944D73D70997DD5A174714DA7DD03A99239F8106098CF4755EC438F269D43D985A090886C9ED98DD686A33D9AD0AC6DD53A0E300ACF2437BD5B9F2B0850B3120411D5747234CB40C57555822ED322E14E73D7B4F0F6FDD64493FDD25337946362A3453568147F93E623367507F65F19198C8EC445981F079D3F18E71647D1DBF699206C3ADF06F3D792C7DF1EEB8EAEE37280CFFA1EF68BBBCC96FC061800D01589A3FE7EEC8BA2234C76AE458EAF0C2AA0A5CE94F3210E023ABFAA17C6E2F86A5BFC4CD2BE21FC1623E1B36EF3A7CD768B1174C580EB3324EBACB6F78F22BD00E2ADA6A8C15320ED37F51BF0C7AE8B66D32233730D2ED001DD288E0C2B60A3EC8D687B0C83D3EB55ACE6499B30AC1A2BA62B1D1018DDE4532C2BFC677158928BCFC133D6D17539D409607692C9C16BEBAD3A041113A5F1B6C737E04A218D8C2507F60D9391C201DA7F90AAB08A5FD798BD794CDCB0F35AD93B256DA5E09803E4C6F917FBA3572C66E1DD3545D14D71B21184CED78D1B6B8C0D76B03712061FA8125C29CF8B809A83C8EA826862DA8F958666E3534C4AA56BFF10A0D74DBCB0777C26106E7AC6EA7FE8B50F7A547AA0989B7C7D3437DBCE1669341264E290646F2C8C564B6640D0DE9ECE1F5C61C6CD3483CC7A19DC70794D9F06831C52FF92FC687DE6343A165E21A5B303E53E46AE319C7F266ACC575D08DDD2932AD39F13A07AD8733C6AF77A8A8491E4E34E66EDCC2A10ADEFDE5A7CABAD08326876BA4E779122560F38E7099CE488C43744823B8A62913F3456CE363BB65ABC0C6D8FAB452D7AA9574364672D4D518B8D3F529EFFFBCD5087CA0284A24B396D86E40324F09E07CC0D64701068CDD477A4B2BA81F55868B27D605CF515082604B1267FCA2BD60FC45EDA420699F44A3B074DFBFD51D4187B1C21842245177035FE3A615710B0C49B800F5E8518408836BCF78C0D31F754399BC339DD8F3F76ED48C2102B3F834BDA3F4F1EBE04A99AD6AE1017A055A52F4731274D98D44E25735DA14C0C88F6BE7D1E3BDBDD841DF2EB7908A45101FE4B2A7DADADEE6F28CEAC49B60C1E3893019143E9E1A49258591FB5FBFF9BB2DAAAE5683D057FB5EF722DEE42FEFB5BD077D9B75C9747B9B52E6664DDB195D39793781516417655FE31CBED68CC4E478CCCF408068AE1A825BF55A264534F6A3248169ABFEBAB539E52F59ED91366A7C86EAFA4F768F1B48A321CC9D79B47B0D1DDC242565BE576E248A7E255B42E3758DF2E538115BF4643DE7E7E17795E02CE73806ECEF168B105C89105B67AD22853E1EE48A6E16CA5453B30A15A79A9954075AAE47656513AC1931CE1137D4DBF538D914B9487985688D34FBC4C05B24ED397D8F0CC3DAE5E82F3B0E28E19A2C76E2E1F5FDCB4B7AAA0F61110301806A21FACA52CF4ACFC84C9A37D42E782D63648CA061E8CD4B06B7BCE5D68D9226902EDDD4090F49C8BE3D41F39934C64FC260D392746E413F9922220C125A68C42BDFB1053008D225180DFCA8287214B63F055CF1023BF0B1E95AFAADABE4B855CAEFDB8DD9DCA9803774C4E2565C741E280AF4493A51899AA51E7E98D5A76A39812984211F1C0F08CE628D505EBB74E4E069F729EDA221B4BA905B59BAC4FB29E35B4C9EC0404ED90AC3E9C74311ADAAF95CF56941C7F6647CF04DBAE38DA0787C11018D48F3CE37797B93B9A9E554C04A61DB50FB2F6300AE4C7989F107B44890589407B5B0B13DC7988CF6DADE4D0845C5D3E733C5FE237E9DA80A65795461706634254F8D3975C0772F3B622B6AFC9CA3A46F9DF3B71F2F8DB7ECC1EAACEE0E541FB2764D30320B1FB69D4BA57A4C66F72A4E9FD5AFE564C71BA0E90ACB0B99E1707D70596E03AED9269DDA67BC96F6AB236AB6D6DE3E0C85D48AB15C8AFF970AADA364B2FE5FE0833703714474C368A5CD18D5681AC2F72B41A1413406C57F6CF4738541FA7256FB68F5FCE90989C76EBE570FABC7AC4523445091DEE6B881C0B3ECB819606B41C2EF288E35BDFE9EDBFEEE8D21115ACC61D9B58AC1050AC96E118F3AC9A9F84A4250B76E37D85B9B94F8C8A15951C7D0BFA88B2E79190C24842F2B5AD3AB0891B1D026FC5A93B265590D84E015B34F454D0DD5920749E81CFE25A10802F50C7094BDF8872CE4E3B9AC61A51529F51AB62F813E249277EE77C81B902988D1CB333904D5BD1BCF8C8E2BB40A7280A735A42B12FFB12A4AE9A270438620BF292F9A8F816C0BB6F458EB1058D7F5736D7043D8CE8ECB21AF813C97DA5F1E8051280D729F1D8D34E2F2D7B9F072B3BEEBC32570820C5744A76B138B21DB667BD834A854915C0C27ADFB5FCE65893DDFDD95C04C30F6BF285887AD7948473056C3EF2ABC0FCE25AF295F61A559759BA920C90E1388F587B74EFDE9F0F86CC0835D9DDF95A968FAFB633885A513CDDD8622577BA96A13DEF5A052BBA9267000AE836ADDBB4992047A6E9A0E69146150BFF2229F96F522B6E2AEE8849CDFAB3F1D8BE4AC843E516EEF9894504BCB0E69F0066646A105D1E0D5494F29221E98692206076711A34B0418023385B88F4B3E6A5ACD0E6643FB47B32DB8597FD455B55B6AC3A07D92751F06A233A0D44A93233302E80D3524F8AE0145188DA26F98CAA13C7C0AE1CB6002B39A183DD3421D93830BD8DAB8DCC99DBA7FE6B06949C9670CF8A8790FAD2EC3E0601051DDD37631174BD4526078F7CED5C3DEE41DA8FDAD9C4497431AC40BC7CBEA0FD612541983030F5A7B3A88DE3E9E1DF01AB1547BED19651AC4E0BDCF5642CD346DDA48E05E1654D2E7B93D3C94222B74413AF8B5CC6EECE41FE8F85679D028C40BD82D04BE0BB0F7A4C1B889771BD8F7F75590100F23737475F3EA8DDFBB4007D51723F5F03297BF0AD503B846F41FF2A263E83F7BB4DED0621830AF288296FA3BD5A1B5D81D9A72063C3721BBB05FBEB5A38684826C2FA78BC5269D5A38DBCA95D677F86FA83456539B48EAC91CA50C647EADBF0CB06BA70D95DA07B0FC042B8A29D7DA5273683B5966DE4EF7037210DE11B42F3A88ED20496E1DB95FA2F1791BD02F33C0E352245323827D9DF38B512FE0D216AACFDC16AB3234CED92B6FA90CD834D3CE7D499A51A5892D38CE1F6598AC7A26564021A2F01A6D2A0BAE5F2909F6B649E95AA73F50AE8A72B4849F3655414352465FF0FAEA18660F9D3B219F02A65A383B357A8C3394D3E1BE67ADBB3EF0A5B2937D0DEDA69C753B6B54ABE8E8F81FB5DC4BBC7BABDDF9A899F5A4645EB60F5E482A9769C5F31BEDE032E90CAD0FAA29F3E29404F50C383CB70C82754F1219DF55B30D861FB3CB99B6DF2AFD01E7D978EE91A66B129FB28A5AB5FCE7AD19A4D5E274F340A156407B0EA9EB287E887AD19E75843BF6A9915872C96B827DA3687F95AF623519B94074C00E12D87109A1D09881C72C752B3A7C9C09E70C7458F862FF05B36808F30520B2730964A8090D3EAA5C9B2F710115AC470F5A8DE29DE136CB478020A2EB49BB6E0630230FA160407FF352CB0A184EDD53A9B5E7AF665C7C3B380BA71C0798B32F3EC05C51C7E9B3150AC54E1167D2ECB491E4A9684FE25911077E5C5A0A19BB8E91BB27A5E93BB632CCC7DD41BACBE8E09DA5B6A69D7E3751C626F1E4FA17CCAA3F3F46403C9B35EC98B5A91225A0A1E62E5B3CAC1E0E4AB2533A56CC0AD18305753A243517C0B33AD637EF5FBFDB847A3DB990BBE23D6491288BF2C4649FBE34D84447931E6D90E384F14FAB278CD366C70D68FD2197023E23B075CF1E1FEA8B676D6468BD5CA470F26DE4F2C05E673F76B08B3FCA5F29C8332468F4FF2905244259ECC3FD64A32709E3C67C8FF00488D7D4126D7F4B1B5A11606564920D35924A28A7212671A8D131CC098CC0153D2425A56D1CAD69F79E8852F5D8A14C207C97ED98289ACECA81AF4A98B5ABCC6D7ECAC8671117D4CC08F8952A83AF584568BB2C3757204045F4A5AF2C514BA078393A12560560ABF9594313E33330A48032D4B2CC3DC1A06A1CCB6E1FF0887AC07DBA20F4896EB66D87A083B276757A3755AFD03738B9098EA071472A22788BF0A350054BE128A2ED7EF996549412DCCB22CD15EAAD0B1EA1A751EA94B0B8611D6E62DB79EA0DA2608621700515F76C008AC38248EFF74B23F1282BC7464DF45F7F8E540A1CAF8A7D4E2F4B947AA1D107650305C15AF2A68CCE56E629640DE6E4C2559B290ED140D08739B913C84EEC7D99BEB30454F5DBD4D8564FCF8F601634A268EB042C1E5666C0EEFA6C33E54BD3E837700B1774B81A15A5D4E51BE7745665F25AFA0ED69CBF18B9248068269D49C981C5921447C001A7E79801EFD7EA8ED5EAF1E34A3974B8A6C13E93694D53E96801748394FE4FED438F0B37F04B00149CC07678572F4DC9005EACFB09BA5D2EDE225A1A18D4F200B06D2A2CD79D7891D62FDA7F215B8AE07E4F5CED9E6059359B5516A5026EDB13C1A231E09120DC4AFA205B2AE51BA3469F21FC515D2EECB73D9E24A38E2CE378C10E68330986D6D3410A4F32F7C657822465C9E910F32B60F025F8479D1CAF6A5D76A9E14BCF92F5F71E9E7056A69F0939E4291FE203449E27DF5AAC389CBE9636E0E3E292565184BC8FB28510483B7E80F0CD5E92AA851810F0BC8B9BB4FB49557B95FACB5C8F004A562F40605D28FC4DB1CEDB6B3B1D2935118BBB800D81DF27D0B719DECE781789B7A9CF0684224C642B77194896FB8A1FE3DFEB510BDD68FF9F03E70F4D4E8E2771FDF739DFFBD927AC9E16757A4093CC79D2C90401956598703597F7193376E901707126C5B67C05CADB0E1FFC5146606F052700682119CE14D84CFA182B5F655E5347350B3A1DD4A1FB5404E274E37B454D9CB4B270E214F15CB812792E5F31C774EF645DBFD77D5B1536D23BF2BA841B63C2B8ECE1915F7C96F276CFD323883CB123924E67B44583D7DA39CF1113F2667C05AC3C568BA1C730279C08C58BB5FFB1A004563DEDE97E4549029BF88C5FC0953167CE85EE8E063C2C5A42F73FA50E6005EE5BDE22E096E531A99D9B7E3FA4251828E844D3E45830E44F307F5CD11EAE87D028F31A32B7EBA80C024413606682E408A5C5CA5E5D5F18A16B86849D4CAF21516137527109099E929A9C5E2B7570B41E1D0E9174D6E8581B4AB0E687B21F4E64D014218F834698B0A2052714C03B3EFE736C30D55009722CAB7E3F87A6BA178435AB309C1635AA147F2802C85C5627FEB26325F8E7E5B3B5955148111C3832665B7EA6EC1D60B36AEC966517D48D8A02E6ABC95684CC0398290023E612CDCFBCCA5247450DF68A3D2E7E5FA3F99164FDAA6F9B32A9F5FF752AF97B2F55EEE16E1F699FDE2D8EF29CD2431806B96039E96036AA7AECA911638E5694856331FE51D4A5D4AA6CAE1607961351709859BE9E9855D7CDA8DA345F01F6FE8530109FA5B7CA93F6CD030C58DCFB91E9C9AA9D9EB9E1679561780498882E5B4999075641898FC9DA284490FDC3CABE09E9B75F9151557938FDCFFA433C38A9AFA4C2426B1A2B88C03ED57B4578DEC41B5BB59052745BB3B123F2286495A2B0ACEFD521E7567FE99B4FBEB51684EB2EC4F6EAC83AC8B30136234668F57A98BB170504B55D399D90BF777C88BD53D49B2BD225F414DE6F86386B7B06B9AA54C4D0109D452F30B0E43EFDA4858C0BBCE95C3666F02C8B66DBDB2E792B826F92F951E0CC31C50B0B67B038D45014176154FA5A785706D627B96170F89C8A90B0FBB61BE2D6B4F77B6BD40CFA4FF04A76D559F706127F031C40D5D78F38F6DB9B4784ECE5F1D49F1E319E73BE744E0F648ED9A8E72F69009AB615969391047C59598CCB9A889B37E2AF64D186DD26D4F79D713910B4ECB839CA9211F313FCABE9BC81123A9ECD413D18D18229BEB239AEB162C4AF47C4EBDFC901B40DD43226E0013279A07DCF7E54809619DF0D4E6E15D8C4C66F25512FCFC35C1F9A9A4FA05287404155806F971A3DC80EF7E75B4B19C21706D0C9F9A141EEEDD0CD157777D89A48B68E23F42D9592EE75845A04103715CAADEECC8FC8BBF353DE60495C9EE446BB1B1C7F975D016C1EAD7CA38859263C0941218A8AA1CC8854836880383D79C9EDC4AE268150EBF3D9C4F33464E4B97283B5AF26CB646FFE34758DB829C336E369A77617A0A3E84769229739F2B4F62F7DA58AED963439CA122BED70BB9E1607012925123D16756513A044AED02852FB9BBA6893BDAC00B0F5CDF5A090D5C15F7913E046D7A4260C98B22F719B147EF1C3AB32F1DD0D178AC38D05EC753BAD44FC56D716D1CB9D11E72768094F95FC2523B024716C0806C1747B57B5A5E1A7D5C2EA1C2401121D60E79D6C4969FC5F7083890AD301E1F9378595AC3254CE6134B11EEFE8E9FA05A90A87A0C4D4885697B8C1C1BABFEA2C0CFE8A4F72CEC7AF4411951ED99FA1A4A27E54C55FCDA9F5DA0C0B4B619F370F3432D4D6950A63CAE6067C3CCE17776E966EE781F903D7E906C812C2F2EE2C0875D8BCA6C297C14A85974294F057DC30E2B2A00D0551214EEF6C8E89E4907863E2E84D508ABD31206DDAA1861ABB45D2A5B38F1487680033BF691B8353E6790F4304F0E55B34C189ED72720E719D322201053BE082AE735C9A3D919CAFCCAADB8A188ADBA2EAC059D12AF62EB3AD1436F4DA39434022FED16218C8CCA9BFD1355D797657C38BDC388941F81EA98EC69C3B05987B7E67931A9F0BA39DBE90850B9466454D207CFD63088EBBD9DF926534F115135711DC6339E7381C7CD4FA17F11CBF3B63E8522872AA1BC8FB35E1C49E3A6C11FCD2C122274488EDEF5F7883B661008B746C9652E9F51F2DC22447121F0D1946AA72D4FB5770F50AF85C0705C2B7F0C813A30A9CEDCDCF96678BDB001F82BB7445BF8396226478E2714588D72805CDCEA3D0B40D5B40F2484104DE25F17E355D2F966285476A5B3B634CB4F868A7D994EF944DE59036C33C776C1034BC4B132FCE3A60355DD8B4CDED1D9F48DE8C21BB9BB22C063F96B7AB7452F3118E28C8E023DA130D452E33A9D603DDF141F07CB287B9C016B5E23628762E804EDDD815A5278879D05F6D21B80B8EAEEF13ECE5EA6C00D900DDDD9855A3BF960DC5117E52CBE20F35D3E416FDA65DA5A814F1ACC4A7F7B57D468C958B5C444FEF75F96B9C6068A64DBD11D7A52FDFFE8A2AB92BEDFE38E0955502944D0B948934F8590F1A40719872A0F2409D302CC008C56E3EAB97FCAA182AF78FC282069C1D0879E882BA645E54D3B05CADB093C7B200ECAA2D78FC095EDB402B7BC6A4E40F5E8D5FE774DD48EC01A688FB6A7698B4387E443CA329A4A2BA0BFD0B1A6F4455A305D31FD97DBB241176F8538013A1B14675089973A0A29302124815023D7B4ED8B01D7F3B7C778B47D373A0E1D8E0CBCDC3DE9AFAD488C4BE808B286673AD164DB1BAB1DAFF36F0AB54E2525D821F125DD9B439672D823B10C4C977F2355728FD5C9BF688E0E9B2D898422109DD3DD58C9BBF041B2DED8C93B19DE93D564D8D5E1B9EFB7172242A918E110743B9DB6F0EE557F370BF7D9C7E85A757825F30BD2301B5ABF3816C3FC67C3F7F3FC124CF3595630E6DC118B096FD2EBFBA6CBB1853E97988D1373DCA5C611EC76CF36765DB89EDA31974AE7A1E5464AA69B605598438A8B5B9752BCF5C8B00400D9EA164021624A4DE6CDACC2F3EDF0D8D104A3A503AC450248E457542838F8D1084528A721F6B2AA6736A6CC887DBDD35146B969A3C48F8D43E7FDA49337744F4091AF8F4C00352BD76471B83AE2EC896813DB1679BAA0148FC63A44B1D730C9DF8EBE785124905CE6A8C0F38275355B0E13706EA5EAECED59BAA52F5D9758B0BD447F030AE9DE88466BC81F8853B4C47EEE55385C0CF10BA9E8BA224594DF1F31EC1D245FDA07B3D038FF700835448AB56DC25B7DE51F7AA4CC422826EB03C5631BE7D8B5EF967EF21E99B9B3E1A7A87695D8324F78F5021671D53BDD842C80F4425EDB00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000cleartomark%RBIEndFontSubset
/NHPCKT+GothamRounded-Bold cguidfix
/F1.1/NHPCKT+GothamRounded-Bold renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
40 w
0.60000002 i
/Cs1 SC
0.80761057 0.15246262 0.18014492 sc
q
33 292 m
293 292 l
293 32 l
33 32 l
h
63 232.00389 m
63 248.57028 76.433121 262 92.996101 262 c
233.00389 262 l
249.57028 262 263 248.56688 263 232.00389 c
263 91.996101 l
263 75.42971 249.56688 62 233.00389 62 c
92.996101 62 l
76.42971 62 63 75.433121 63 91.996101 c
63 232.00389 l
h
63 232.00389 m
W*
0 0 325 325 rc
1 0 0 -1 63 262 cm
0 29.996103 m
0 13.429712 13.43312 0 29.996103 0 c
170.00389 0 l
186.57028 0 200 13.43312 200 29.996103 c
200 170.00389 l
200 186.57028 186.56688 200 170.00389 200 c
29.996103 200 l
13.429712 200 0 186.56688 0 170.00389 c
0 29.996103 l
h
0 29.996103 m
S
Q
/Cs2 SC
0.19607843 0.19607843 0.19607843 sc
q
91 98 144 227 rc
1 0 0 -1 111 225 cm
/F1.1[ 140 0 0 -140 0 0]sf
0.34 112 m
(!)s
0.34 112 m
(!)s
Q
/Cs1 SC
1 0.64887643 0.20392157 sc
q
95.5 217 m
102.40356 217 108 222.59644 108 229.5 c
108 236.40356 102.40356 242 95.5 242 c
88.596443 242 83 236.40356 83 229.5 c
83 222.59644 88.596443 217 95.5 217 c
h
95.5 217 m
W*
0 0 325 325 rc
78 247 m
113 247 l
113 212 l
78 212 l
h
f
ep
end
